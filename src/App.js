import React, { useEffect, useState } from 'react'
import { Routes, Route, Link, useNavigate, useLocation } from 'react-router-dom'
import { supabase } from './supabaseClient'
import { FaCopy, FaPlus, FaPlusCircle, FaPlusSquare } from 'react-icons/fa'; // Font Awesome
import { HiDuplicate } from 'react-icons/hi'; // Hero Icons
import MuscleDetail from './MuscleDetail'      
import MuscleEditPage from './MuscleEditPage'
import MuscleDysfunctions from './MuscleDysfunctions'
import './App.css'; // –í–∞—à–∏ —Å—Ç–∏–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏

function MuscleList({ muscles, onEdit, onDelete, onAdd, onCopy, onMove }) {
  const [searchTerm, setSearchTerm] = useState('')

  const filteredMuscles = muscles.filter((m) =>
    m.name_ru.toLowerCase().includes(searchTerm.toLowerCase())
  )  

  return (
    <div style={{ padding: '2rem', maxWidth: '800px', margin: 'auto' }}>
      <input
        type="text"
        placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –º—ã—à—Ü—ã..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        style={{
          width: '100%',
          padding: '0.5rem',
          marginBottom: '1.5rem',
          fontSize: '1rem'
        }}
      />
    
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
        <h1>–°–ø–∏—Å–æ–∫ –º—ã—à—Ü</h1>
        <button 
          onClick={onAdd}
          className="action-btn add-btn"
          style={{ marginLeft: '0', alignItems: 'center' }}
        >
          <FaPlusSquare size={14} title="–î–æ–±–∞–≤–∏—Ç—å –º—ã—à—Ü—É" />
          <span style={{ marginLeft: '4px' }}></span>  
        </button>
      </div>
      
      <ul style={{ listStyleType: 'none', paddingLeft: 0 }}>
        {filteredMuscles.length === 0 && <li>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</li>}
        {filteredMuscles.map((m, index) => (  
          <li key={m.id} style={{ marginBottom: '1.5rem', borderBottom: '1px solid #ddd', paddingBottom: '1rem' }}>      
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
              <Link to={`/muscle/${m.id}`}>
                <strong>{m.name_ru}</strong> ({m.name_lat})
              </Link>
              <div>
                <button onClick={() => onCopy(m.id)} title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å" className="action-btn copy-btn">
                  <HiDuplicate size={12} title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å" />
                </button> 	
                <button onClick={() => onEdit(m.id)} title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" className="action-btn edit-btn">‚úèÔ∏è</button>	  
                <button onClick={() => onDelete(m.id)} title="–£–¥–∞–ª–∏—Ç—å" className="action-btn delete-btn">üóëÔ∏è</button>
                <button onClick={() => onMove(m.id, 'up')} disabled={index === 0} title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã—à–µ" className="action-btn move-btn">‚Üë</button>
                <button onClick={() => onMove(m.id, 'down')} disabled={index === muscles.length - 1} title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∏–∂–µ" className="action-btn move-btn">‚Üì</button>  
              </div>
            </div>

            
			  {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –¥–≤—É–º—è "—Å—Ç–æ–ª–±—Ü–∞–º–∏" */}
			  <div style={{ display: 'flex', marginTop: '0.5rem' }}>
				{/* –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü */}
				<div style={{ flex: 1 }}>
				  {/* –ú–µ—Ä–∏–¥–∏–∞–Ω—ã */}
				  {m.meridians?.length > 0 && (
					<div>
					  <em>–ú–µ—Ä–∏–¥–∏–∞–Ω—ã:</em>{' '}
					  {m.meridians.length === 1
						? m.meridians[0]
						: (
						  <ul style={{ marginTop: 0, marginBottom: 0 }}>
							{m.meridians.map((name, idx) => <li key={idx}>{name}</li>)}
						  </ul>
						)}
					</div>
				  )}

				  {/* –û—Ä–≥–∞–Ω—ã */}
				  {m.organs?.length > 0 && (
					<div style={{ marginTop: '0.5rem' }}>
					  <em>–û—Ä–≥–∞–Ω—ã:</em>{' '}
					  {m.organs.length === 1
						? m.organs[0]
						: (
						  <ul style={{ marginTop: 0, marginBottom: 0 }}>
							{m.organs.map((name, idx) => <li key={idx}>{name}</li>)}
						  </ul>
						)}
					</div>
				  )}
				</div>

				{/* –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü */}
				<div style={{ flex: 1, textAlign: 'right' }}>
				  {/* –î–∏—Å—Ñ—É–Ω–∫—Ü–∏–∏ */}
				  {m.dysfunctionsCount > 0 && (
					<div>
					  <Link 
						to={`/muscle/${m.id}/dysfunctions`} 
						className="link-text">
						<em >–î–∏—Å—Ñ—É–Ω–∫—Ü–∏–π: {m.dysfunctionsCount}</em>
					  </Link>
					</div>
				  )}
				</div>
			  </div>
          </li>
        ))}
      </ul>
    </div>
  )
}

function App() {
  const [muscles, setMuscles] = useState([])
  
  const [loading, setLoading] = useState(true)
  const navigate = useNavigate();
  const location = useLocation();

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	  useEffect(() => {
		if (location.state?.shouldRefresh) {
		  fetchMuscles();
		  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
		  navigate('.', { replace: true, state: {} });
		}
	  }, [location.state]);


// –í—ã–Ω–µ—Å–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é fetchMuscles –∏–∑ –¥—Ä—É–≥–æ–≥–æ useEffect, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ—ë –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
  
async function fetchMuscles() {
  // –í —Ñ—É–Ω–∫—Ü–∏–∏ fetchMuscles –∑–∞–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å dysfunctionsCount –Ω–∞:
  setLoading(true);

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º—ã—à—Ü
    const { data: muscleList, error: muscleError } = await supabase
      .from('muscles')
      .select('*')
      .order('display_order')
      .order('name_ru');

    if (muscleError) throw muscleError;

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [
      { data: merLinks },
      { data: orgLinks },
      { data: dysfunctionsData },
      { data: groupMemberships },
      { data: groupDysfunctions }
    ] = await Promise.all([
      supabase.from('muscle_meridians').select('muscle_id, meridians(name)'),
      supabase.from('muscle_organs').select('muscle_id, organs(name)'),
      supabase.from('muscle_dysfunctions').select('muscle_id, dysfunctions(id)'),
      supabase.from('muscle_group_membership').select('muscle_id, muscle_groups(id)'),
      supabase.from('muscle_group_dysfunctions').select('group_id, dysfunctions(id)')
    ]);

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    const muscleDysfunctionsMap = {};
    dysfunctionsData?.forEach(item => {
      muscleDysfunctionsMap[item.muscle_id] = (muscleDysfunctionsMap[item.muscle_id] || 0) + 1;
    });

    const groupDysfunctionsMap = {};
    groupDysfunctions?.forEach(item => {
      groupDysfunctionsMap[item.group_id] = (groupDysfunctionsMap[item.group_id] || 0) + 1;
    });

    const muscleGroupsMap = {};
    groupMemberships?.forEach(item => {
      if (!muscleGroupsMap[item.muscle_id]) {
        muscleGroupsMap[item.muscle_id] = [];
      }
      muscleGroupsMap[item.muscle_id].push(item.muscle_groups.id);
    });

    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º—ã—à—Ü
    const enriched = muscleList.map((m) => {
      const groupDysfunctionsCount = (muscleGroupsMap[m.id] || []).reduce((sum, groupId) => {
        return sum + (groupDysfunctionsMap[groupId] || 0);
      }, 0);

      return {
        ...m,
        meridians: merLinks?.filter(l => l.muscle_id === m.id).map(l => l.meridians?.name),
        organs: orgLinks?.filter(l => l.muscle_id === m.id).map(l => l.organs?.name),
        dysfunctionsCount: (muscleDysfunctionsMap[m.id] || 0) + groupDysfunctionsCount
      };
    });

    setMuscles(enriched);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    setLoading(false);
  }
}



  useEffect(() => {
	
	  

	
   const initializeApp = async () => {
      try {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–µ—à–∞ —Å—Ö–µ–º—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await supabase.rpc('sync_columns_cache');
        console.log('–°—Ö–µ–º–∞ –ë–î —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º—ã:', error);
      }
    };
    
    initializeApp();
    fetchMuscles()
  }, [])

  const handleEdit = (id) => {
    console.log('Edit:', id)
    // –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–¥–µ—Å—å –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∏–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    navigate(`/muscle/${id}/edit`)
  }

  const handleDelete = async (id) => {
    const confirmed = window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º—ã—à—Ü—É?')
    if (!confirmed) return

    const { error } = await supabase.from('muscles').delete().eq('id', id)
    if (error) {
      console.error(error)
      return
    }

    setMuscles((prev) => prev.filter((m) => m.id !== id))
  }

	const handleAdd = async () => {
	  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—É—Å—Ç—É—é –º—ã—à—Ü—É
	  const { data, error } = await supabase
		.from('muscles')
		.insert([{ 
		  name_ru: '–ù–æ–≤–∞—è –º—ã—à—Ü–∞',
		  name_lat: '',
		  origin: '',
		  insertion: '',
		  indicator: '',
		  pain_zones_text: '',
		  notes: ''
		}])
		.select()
		.single();

	  if (error) {
		console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', error);
		return;
	  }

	  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
	  navigate(`/muscle/${data.id}/edit`);
	};

	const handleCopy = async (muscleId) => {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –º—ã—à—Ü—É
    const { data: original } = await supabase
      .from('muscles')
      .select('*')
      .eq('id', muscleId)
      .single();

    // 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ø–∏–∏
    const { id, created_at, ...copyData } = original;

    // 3. –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å –ø–æ–º–µ—Ç–∫–æ–π
    const { data: copiedMuscle, error: insertError } = await supabase
      .from('muscles')
      .insert([{ 
        ...copyData,
        name_ru: `${copyData.name_ru} (–∫–æ–ø–∏—è)`
      }])
      .select()
      .single();

    if (insertError) throw insertError;

    // 4. –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∏
    await copyMuscleRelations(muscleId, copiedMuscle.id);

    // 5. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    navigate(`/muscle/${copiedMuscle.id}/edit`, {
      state: { 
        copiedData: {
          ...copiedMuscle,
          meridians: original.meridians,
          organs: original.organs
        }
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é');
  }
};

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤—è–∑–µ–π
	const copyMuscleRelations = async (sourceId, targetId) => {
  const relations = [
    'muscle_group_membership',
    'muscle_dysfunctions',
    'muscle_meridians',
    'muscle_organs',
    'muscle_nerves',
    'muscle_vertebrae',
    'muscle_functions' // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Ç–∞–±–ª–∏—Ü—É
  ];

  for (const table of relations) {
    const { data: links } = await supabase
      .from(table)
      .select('*')
      .eq('muscle_id', sourceId);

    if (links?.length > 0) {
      const newLinks = links.map(link => ({
        ...link,
        muscle_id: targetId
		// ,
        // id: undefined // –£–±–∏—Ä–∞–µ–º id, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      }));
		
      await supabase.from(table).insert(newLinks);
    }
  }
};

	//–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä—è–¥–∫–∞ –º—ã—à—Ü
	const moveMuscle = async (id, direction) => {
  const currentIndex = muscles.findIndex(m => m.id === id);
  if (currentIndex === -1) return;

  const newIndex = direction === 'up' ? currentIndex - 1 : currentIndex + 1;
  if (newIndex < 0 || newIndex >= muscles.length) return;

  // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–æ—Ä—è–¥–∫–∞–º–∏
  const updatedMuscles = [...muscles];
  const tempOrder = updatedMuscles[currentIndex].display_order;
  const newOrder = updatedMuscles[newIndex].display_order;

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –º—ã—à—Ü—É
    const { error: error1 } = await supabase
      .from('muscles')
      .update({ display_order: newOrder })
      .eq('id', updatedMuscles[currentIndex].id);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –º—ã—à—Ü—É
    const { error: error2 } = await supabase
      .from('muscles')
      .update({ display_order: tempOrder })
      .eq('id', updatedMuscles[newIndex].id);

    if (error1 || error2) {
      throw error1 || error2;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    updatedMuscles[currentIndex].display_order = newOrder;
    updatedMuscles[newIndex].display_order = tempOrder;
    
    setMuscles(updatedMuscles.sort((a, b) => a.display_order - b.display_order));
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫');
  }
};
	
	
  if (loading) return <div style={{ padding: '2rem' }}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>

  return (   
<>
    {/* –û—Å—Ç–∞–ª—å–Ω–æ–π –≤–∞—à –∫–æ–¥ (—Ä–æ—É—Ç—ã –∏ —Ç.–¥.) */}
    <Routes>
      <Route
        path="/"
        element={<MuscleList muscles={muscles} onEdit={handleEdit} 
		onDelete={handleDelete} onAdd={handleAdd}  
		onCopy={handleCopy} onMove={moveMuscle} />}
      />
      <Route path="/muscle/:id" element={<MuscleDetail />} />
      <Route path="/muscle/:id/edit" element={<MuscleEditPage />} />
	  <Route path="/muscle/:id/dysfunctions" element={<MuscleDysfunctions />} />
    </Routes>
</>
  )
}


export default App
